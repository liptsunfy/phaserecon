# -*- coding:utf-8 -*-
# @Time : 2020/9/30 8:01
# @Author: Li Pengtao
# @Note：

# Form implementation generated from reading ui file 'beta.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtWidgets import *
import matplotlib
from FunPhaserecon import unpack, reconstraction, img_s_median
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout
from PyQt5.QtCore import QCoreApplication

matplotlib.use("Qt5Agg")  # 声明使用QT5
import matplotlib.pyplot as plt
import numpy as np
from PyQt5.QtGui import QImage, QFont

from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import gc

import base64
from PIL import Image
from io import BytesIO

img_open = "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"
img_about = "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"
img_clear = "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"
img_editor = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAErklEQVR4nO3dYXEcRxSF0QthIQiCGLghBMIySCCIQQxBEMwgj4HNIGaQMEh+KK6oXLKlXc2bmZ49p+r+3q7t+SRLdq0TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOBmnZJ8sNV296ZbYVN3SX5P8jnJP7bqHl69HTZzylMYWz8kt7yH1y6JbdzHd4w97OGVe2ID90n+yvYPhwlkd05J/sz2D4atG8gpyS8rvdbU/sj2D4WtG8gp//9x+rzC601rZPsHwtYN5Hkc33Zufs1pfcr2D4StF8hLcYjkB07Z/mGw9QL5WRwiecE52z8Mtk4gb4lDJN95yPYPg/UHckkcInnmY7Z/GKw3kGviEMl/Kpe9YV/y9Fsv691dlvGeOESSywOpLQ7JVZaI49sXxZtVEcgRLRnHaeWz70pFIEcjjgVVBHIk4lhYRSBHIY4GFYEcgTiaVAQyO3E0qghkZuJoVhHIrMSxgopAZiSOlVQEMhtxrKgikJmIY2UVgcxiqTgeVz731CoCmcFSn1f2uPK5p1cRyN4t9Xlljyuf+xAqAtkzcWysIpC9EscOVASyR+LYiYpA9kYcO1IRyJ6IY2cqAtkLcexQRSB7II6dqghka+LYsYpAtiSOnasIZCvimEBFIFsQxyQqAlmbOCZSEciaxDGZikDWIo4JVQSyBnFMqiKQbuKYWEUgncQxuYpAuojjACoC6SCOg6gIZGniOJCKQJYkjoOpCGQp4jigikCWII6DqgjkvcRxYBWBvIc4Dq4ikGuJ4wZUBHINcdyIikAuJY4bUhHIJcRxYyoCeStx3KCKQN5ir3GMK84wFj7DoVUE8pq9xpEIpF1FID+zVBy/NZ1vXHGW0XSWQ6oI5Ed+yTJxnBvPOK44z2g8z+FUBPKSc94fRncciUDaVQTyvXPmiCMRSLuKQJ47Z544EoG0qwjkm3PmiiMRSLuKQJI540gE0q4ikHPmjCMRSLvKbQdyzrxxJAJpV7ndQM6ZO45EIO0qtxnIOfPHkQikXeU2AzlCHIlA2lUEMmsciUDaVQQyaxyJQNpVBDJrHIlA2lUEMmsciUDaVQQyaxyJQNpVBDJrHIlA2lUEMmsciUDaVW4vkFOOEUcikHaV2wxkPNv9hmd5rxGBtKrcXiBHMiKQVhWBzGxEIK0qApnZiEBaVQQysxGBtKoIZGYjAmlVEcjMRgTSqiKQmY0IpFVFIDMbEUirikBmNiKQVhWBzGxEIK0qApnZiEBaVQQysxGBtKoIZGYjAmlVEcjMRgTSqiKQmY0IpFVFIDMbEUirikBmNiKQVhWBzGxEIK0qApnZiEBaVQQysxGBtKoIZGYjAmlVEcjMRgTSqnLZm/s5yQfbzX698P4EcqGPufwNtrk3wps9ZPsLs3U38wflre6c7S/M1h0XeOvn1Nox9ilc7FO2vzhbZ+dwsZHtL8769zVcrbL9BVrvzuFqpzx9hdn6Eq1nj+Hd7pP8ne0v05bdl7CY+zy9oVtfqi2zx7C4U/wF4uz7Gj9ztLvL0z9F8R1lnn2KMDbx/f/rZ/sbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDL/gUG/Rt1afzkfwAAAABJRU5ErkJggg=="
img_exit = "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"
img_run = "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"
img_save = "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"
img_MyDIP = "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"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(970, 520)  # 主界面尺寸
        MainWindow.setFixedSize(MainWindow.width(), MainWindow.height())  # 禁止调整主窗口大小
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        '''
        界面左侧指令栏
        Button：原始图像选择，重构，解包裹， 重置
        '''

        # 指令栏边框 左
        self.leftPart = QtWidgets.QGroupBox(MainWindow)
        self.leftPart.setGeometry(QtCore.QRect(10, 80, 150, 390))
        self.leftPart.setObjectName("LeftGroup")

        # 左侧指令栏风格设计
        # self.leftPart.setStyleSheet('''
        #   QPushButton{border:none;color:black;}
        #   QPushButton#left_label{
        #     border:none;
        #     border-bottom:1px solid white;
        #     font-size:18px;
        #     font-weight:700;
        #     font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        #   }
        #   QPushButton#left_button:hover{border-left:4px solid red;font-weight:700;}
        # ''')

        # 按钮“打开文件”设置
        self.btnOpenFile = QtWidgets.QPushButton(self.leftPart)
        self.btnOpenFile.setGeometry(QtCore.QRect(20, 60, 110, 32))  # 位置为相对于Groupbox的坐标
        self.btnOpenFile.setObjectName("btnOpenFile")
        self.btnOpenFile.setStyleSheet("QPushButton{"
                                   "border-color: rgb(0, 0, 0);"
                                   "\nbackground-color: rgb(211,211,211);"
                                   "\ncolor: rgb(0, 0, 0);"
                                   "\nborder-radius: 10px;"
                                   "\npadding: 8;}"
                                   "QPushButton:hover{"
                                   "border-color: rgb(0, 0, 0);"
                                   "\nbackground-color:rgb(255, 255, 255);"
                                   "\ncolor:  rgb(123, 139, 111);"
                                   "\nborder-radius: 10px;"
                                   "\npadding: 8;}")

        # 按钮“重构”设置
        self.btnReconst = QtWidgets.QPushButton(self.leftPart)
        self.btnReconst.setGeometry(QtCore.QRect(20, 120, 110, 32))
        self.btnReconst.setObjectName("btnReconst")
        self.btnReconst.setStyleSheet("QPushButton{"
                                       "border-color: rgb(0, 0, 0);"
                                       "\nbackground-color: rgb(211,211,211);"
                                       "\ncolor: rgb(0, 0, 0);"
                                       "\nborder-radius: 10px;"
                                       "\npadding: 8;}"
                                       "QPushButton:hover{"
                                       "border-color: rgb(0, 0, 0);"
                                       "\nbackground-color:rgb(255, 255, 255);"
                                       "\ncolor:  rgb(123, 139, 111);"
                                       "\nborder-radius: 10px;"
                                       "\npadding: 8;}")

        # 按钮“保存结果”设置
        self.btnSaveResults = QtWidgets.QPushButton(self.leftPart)
        self.btnSaveResults.setGeometry(QtCore.QRect(20, 170, 110, 32))
        self.btnSaveResults.setObjectName("btnSaveResults")
        self.btnSaveResults.setStyleSheet("QPushButton{"
                                       "border-color: rgb(0, 0, 0);"
                                       "\nbackground-color: rgb(211,211,211);"
                                       "\ncolor: rgb(0, 0, 0);"
                                       "\nborder-radius: 10px;"
                                       "\npadding: 8;}"
                                       "QPushButton:hover{"
                                       "border-color: rgb(0, 0, 0);"
                                       "\nbackground-color:rgb(255, 255, 255);"
                                       "\ncolor:  rgb(123, 139, 111);"
                                       "\nborder-radius: 10px;"
                                       "\npadding: 8;}")

        # 按钮“重置”设置
        self.btnClear = QtWidgets.QPushButton(self.leftPart)
        self.btnClear.setGeometry(QtCore.QRect(20, 230, 110, 32))
        self.btnClear.setObjectName("btnClear")
        self.btnClear.setStyleSheet("QPushButton{"
                                       "border-color: rgb(0, 0, 0);"
                                       "\nbackground-color: rgb(211,211,211);"
                                       "\ncolor: rgb(0, 0, 0);"
                                       "\nborder-radius: 10px;"
                                       "\npadding: 8;}"
                                       "QPushButton:hover{"
                                       "border-color: rgb(0, 0, 0);"
                                       "\nbackground-color:rgb(255, 255, 255);"
                                       "\ncolor:  rgb(123, 139, 111);"
                                       "\nborder-radius: 10px;"
                                       "\npadding: 8;}")

        '''
        界面右侧图像显示栏
        '''
        # 右侧显示区域
        self.rightPart = QtWidgets.QGroupBox(MainWindow)  # 右半部分边框
        self.rightPart.setGeometry(QtCore.QRect(180, 80, 780, 390))
        self.rightPart.setObjectName("RightGroup")

        # 原始图像展示区域
        self.labImage = QtWidgets.QLabel(self.centralwidget)
        self.labImage.setGeometry(QtCore.QRect(200, 180, 54, 12))  # 位置
        self.labImage.setAlignment(QtCore.Qt.AlignCenter)
        self.labImage.setObjectName("labImage")

        # 重构结果展示区域
        self.labReconst = QtWidgets.QLabel(self.centralwidget)
        self.labReconst.setGeometry(QtCore.QRect(600, 180, 54, 12))
        self.labReconst.setAlignment(QtCore.Qt.AlignCenter)
        self.labReconst.setObjectName("labReconst")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")

        '''
        ## manu栏
        '''
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_run = QtWidgets.QMenu(self.menubar)
        self.menu_run.setObjectName("menu_run")
        self.menu_view = QtWidgets.QMenu(self.menubar)
        self.menu_view.setObjectName("menu_view")
        self.menu_help = QtWidgets.QMenu(self.menubar)
        self.menu_help.setObjectName("menu_help")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_run.menuAction())
        self.menubar.addAction(self.menu_view.menuAction())
        self.menubar.addAction(self.menu_help.menuAction())

        ## 菜单栏二级目录
        self.action_openFile = QtWidgets.QAction(MainWindow)  # 文件-打开
        self.action_openFile.setObjectName("action_openFile")
        self.action_saveFile = QtWidgets.QAction(MainWindow)  # 文件-保存
        self.action_saveFile.setObjectName("action_saveFile")
        self.action_exit = QtWidgets.QAction(MainWindow)  # 文件-退出
        self.action_exit.setObjectName("action_exit")

        self.action_phaseRecon = QtWidgets.QAction(MainWindow)  # 运行- 执行重构
        self.action_phaseRecon.setObjectName("runPhaseRecon")
        self.action_reSet = QtWidgets.QAction(MainWindow)  # 运行- 重置界面
        self.action_reSet.setObjectName("action_reSet")

        self.action_about = QtWidgets.QAction(MainWindow)  # 帮助 - 关于
        self.action_about.setObjectName("action_about")

        self.menu_file.addAction(self.action_openFile)
        self.menu_file.addAction(self.action_saveFile)
        self.menu_file.addSeparator()  # 分割线
        self.menu_file.addAction(self.action_exit)  # 文件 - 退出

        self.menu_run.addAction(self.action_phaseRecon)
        self.menu_run.addSeparator()  # 分割线
        self.menu_run.addAction(self.action_reSet)

        self.menu_help.addAction(self.action_about)

        # 文本标签
        self.label_sValue = QtWidgets.QLabel(MainWindow)  # s当前取值
        self.label_sValue.setGeometry(QtCore.QRect(600, 400, 100, 50))
        self.label_sValue.setObjectName("label_sValue")

        # 按钮“3维显示”设置
        self.btn3D = QtWidgets.QPushButton(self.rightPart)
        self.btn3D.setGeometry(QtCore.QRect(200, 320, 110, 32))
        self.btn3D.setObjectName("btn3D")
        self.btn3D.setStyleSheet("QPushButton{"
                                 "border-color: rgb(0, 0, 0);"
                                  "\nbackground-color: rgb(211,211,211);"
                                  "\ncolor: rgb(0, 0, 0);"
                                 "\nborder-radius: 10px;"
                                  "\npadding: 8;}"
            "QPushButton:hover{"
                                 "border-color: rgb(0, 0, 0);"
                                 "\nbackground-color:rgb(255, 255, 255);"
                                 "\ncolor:  rgb(123, 139, 111);"
                                 "\nborder-radius: 10px;"
                                 "\npadding: 8;}")


        self.btn3D_1 = QtWidgets.QPushButton(self.rightPart)
        self.btn3D_1.setGeometry(QtCore.QRect(600, 320, 110, 32))
        self.btn3D_1.setObjectName("btn3D_1")
        self.btn3D_1.setStyleSheet("QPushButton{"
                                 "border-color: rgb(0, 0, 0);"
                                 "\nbackground-color: rgb(211,211,211);"
                                 "\ncolor: rgb(0, 0, 0);"
                                 "\nborder-radius: 10px;"
                                 "\npadding: 8;}"
                                 "QPushButton:hover{"
                                 "border-color: rgb(0, 0, 0);"
                                 "\nbackground-color:rgb(255, 255, 255);"
                                 "\ncolor:  rgb(123, 139, 111);"
                                 "\nborder-radius: 10px;"
                                 "\npadding: 8;}")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "相位重构 v1.0"))
        x = base64.b64decode(img_MyDIP)
        encode_MyDIP = Image.open(BytesIO(x))
        pixmap = encode_MyDIP.toqpixmap()
        MainWindow.setWindowIcon(QtGui.QIcon(pixmap))  # 窗口图标

        '''
        # 窗口上方菜单栏
        '''
        self.menu_file.setTitle(_translate("MainWindow", "文件(&F)"))
        self.menu_run.setTitle(_translate("MainWindow", "运行(&R)"))
        self.menu_view.setTitle(_translate("MainWindow", "视图(&V)"))
        self.menu_help.setTitle(_translate("MainWindow", "帮助(&H)"))

        ## 二级栏目设置
        self.action_openFile.setText(_translate("MainWindow", "打开..."))
        self.action_openFile.setShortcut("Ctrl+O")
        x = base64.b64decode(img_open)
        encode_open = Image.open(BytesIO(x))
        pixmap = encode_open.toqpixmap()
        self.action_openFile.setIcon(QtGui.QIcon(pixmap))

        self.action_saveFile.setText(_translate("MainWindow", "保存..."))
        self.action_saveFile.setShortcut("Ctrl+S")
        x = base64.b64decode(img_save)
        encode_save = Image.open(BytesIO(x))
        pixmap = encode_save.toqpixmap()
        self.action_saveFile.setIcon(QtGui.QIcon(pixmap))

        self.action_exit.setText(_translate("MainWindow", "退出..."))
        self.action_exit.setShortcut("Ctrl+E")
        x = base64.b64decode(img_exit)
        encode_exit = Image.open(BytesIO(x))
        pixmap = encode_exit.toqpixmap()
        self.action_exit.setIcon(QtGui.QIcon(pixmap))

        self.action_phaseRecon.setText(_translate("MainWindow", "执行重构..."))
        self.action_phaseRecon.setShortcut("Ctrl+R")
        x = base64.b64decode(img_run)
        encode_run = Image.open(BytesIO(x))
        pixmap = encode_run.toqpixmap()
        self.action_phaseRecon.setIcon(QtGui.QIcon(pixmap))

        self.action_reSet.setText(_translate("MainWindow", "重置..."))
        self.action_reSet.setShortcut("Ctrl+Shift+R")
        x = base64.b64decode(img_clear)
        encode_clear = Image.open(BytesIO(x))
        pixmap = encode_clear.toqpixmap()
        self.action_reSet.setIcon(QtGui.QIcon(pixmap))

        self.action_about.setText(_translate("MainWindow", "关于..."))
        self.action_about.setShortcut("Ctrl+A")
        x = base64.b64decode(img_about)
        encode_about = Image.open(BytesIO(x))
        pixmap = encode_about.toqpixmap()
        self.action_about.setIcon(QtGui.QIcon(pixmap))

        # 分栏标签
        self.leftPart.setTitle(_translate("MatrixWin", "控制面板"))
        self.leftPart.setFont(QFont("Roman times", 12, QFont.Bold))  # 调整字体属性
        self.rightPart.setTitle(_translate("MatrixWin", "结果显示"))
        self.rightPart.setFont(QFont("Roman times", 12, QFont.Bold))  # 调整字体属性

        # 原始图像展示区域
        self.labImage.setText(_translate("MainWindow", "原始图像"))
        self.labImage.setFixedSize(350, 240)  # 尺寸设置
        self.labImage.move(200, 100)
        self.labImage.setStyleSheet("QLabel{background:white;}")

        # 重构结果展示区域
        self.labReconst.setText(_translate("MainWindow", "重构结果"))
        self.labReconst.move(580, 100)
        self.labReconst.setFixedSize(350, 240)
        self.labReconst.setStyleSheet("QLabel{background:white;}")

        # 窗口功能按钮
        self.btnOpenFile.setText(_translate("MainWindow", "选择图像"))
        self.btnClear.setText(_translate("MainWindow", "重置"))
        self.btnReconst.setText(_translate("MainWindow", "执行重构"))
        self.btnSaveResults.setText(_translate("MainWindow", "保存重构结果"))
        self.btn3D.setText((_translate("MainWindow","3维显示")))
        self.btn3D_1.setText((_translate("MainWindow", "3维显示")))



class Window(QMainWindow, Ui_MainWindow):
    def __init__(self, *args, **kwargs):
        super(Window, self).__init__(*args, **kwargs)
        self.setupUi(self)

        '''
        ## 软件下方状态栏
        '''
        layout = QVBoxLayout()
        QToolTip.setFont(QFont('宋体', 10))  # ToolTip设置
        self.statusBar().showMessage('准备就绪...！')  # statusBar设置

        # ## 进度条
        # self.progressBar = QProgressBar()
        # self.statusBar().addPermanentWidget(self.progressBar)
        # self.progressBar.setGeometry(50, 0, 50, 3)
        # self.progressBar.setRange(0, 50)  # 设置进度条的范围
        # self.progressBar.setValue(10)

        '''
        ## 功能按钮 链接事件
        ## “执行解包裹”： 当点击“执行解包裹”按钮时，弹出子窗口，输入S取值，并显示解包裹计算结果
        '''
        self.btnOpenFile.clicked.connect(self.openFile)  # 打开文件
        self.btnOpenFile.setStatusTip("请选择要处理的图像文件")
        self.btnReconst.clicked.connect(self.inputS)  # 点击开始重构计算
        self.btnReconst.setStatusTip("点击此按钮将执行重构")
        self.btnSaveResults.clicked.connect(self.saveReconst)  # 保存重构结果
        self.btnSaveResults.setStatusTip("保存重构结果")
        self.btnClear.clicked.connect(self.clearAll)  # 重置选择文件
        self.btnClear.setStatusTip("重置界面")
        self.btn3D.clicked.connect(self.tripD_display)  # 解包裹结果3维显示
        self.btn3D.setStatusTip("显示3维图像")
        self.btn3D_1.clicked.connect(self.tripD_display1)  # 重构结果3维显示
        self.btn3D_1.setStatusTip("显示3维图像")

        '''
        ## manu 点击动作执行
        '''
        self.action_openFile.triggered.connect(self.openFile)
        self.action_saveFile.triggered.connect(self.saveReconst)
        self.action_about.triggered.connect(self.showMessageAbout)
        self.action_phaseRecon.triggered.connect(self.inputS)
        self.action_reSet.triggered.connect(self.clearAll)
        self.action_exit.triggered.connect(QCoreApplication.instance().quit)  # 关闭程序

    def openFile(self):
        imgName, imgType = QFileDialog.getOpenFileName(self, "打开图片", "", "*.bmp;;All Files(*)")
        oriImg = QtGui.QPixmap(imgName).scaled(self.labImage.width(), self.labImage.height())

        global inputImg_path  # 设置一个全局变量用来传递图像绝对路径
        inputImg_path = imgName

        self.labImage.setPixmap(oriImg)  # 显示打开的图像

    def inputS(self, event):  # 输入：整数
        '''
        输入S值后执行解包裹操作
        '''
        try:
            inputImg_path
        except:
            self.showMessageBox()  # 警告！
        else:
            # 后面四个数字的作用依次是 初始值 最小值 最大值 步幅
            value, ok = QInputDialog.getInt(self, "执行重构", "请输入s值\n\n请输入整数(点击ok，即可执行重构):", 100, 0, 1000, 1)

            global input_s
            input_s = value  # s值 全局变量传递给重构函数

            if ok:
                self.reConst()
                self.label_sValue.setText("当前s取值：\n   s = {}".format(input_s))  # 显示当前S取值
                self.label_sValue.setFont(QFont("Roman times", 8, QFont.Bold))  # 调整字体属性


    # 重构
    def reConst(self):
        upResults, img_mat = unpack(inputImg_path)  # 第一步图像解包裹结果

        global valur_for_display
        valur_for_display = upResults

        global img_matrix
        img_matrix = img_mat

        n_row = upResults.shape[0]
        n_col = upResults.shape[1]

        data = np.array(list(upResults), dtype='float64')
        input_for_recon = data.reshape(n_row, n_col)

        # 重构结果
        value_d = img_s_median(input_s, img_matrix, n_row)  # 计算d值
        del img_matrix
        gc.collect()  # 清除全局变量img_matrix

        value_results = reconstraction(input_for_recon, s=input_s, d=value_d)  # 重构数值结果

        global value_for_3Ddisplay1
        value_for_3Ddisplay1 = value_results

        value_results = value_results.astype(np.uint8)  # 更改数据类型

        # 将array 转换成QImage
        im = QImage(value_results.data, value_results.shape[1], value_results.shape[0], value_results.shape[1],
                    QImage.Format_Indexed8)
        reconstImg = QtGui.QPixmap(im).scaled(n_col, n_row)

        global recontResults
        recontResults = value_results  # 将结果传递给解包裹函数

        self.labReconst.setPixmap(reconstImg)  # 显示输出的图像
        self.labReconst.setScaledContents(True)  # 图片自适应label大小

        self.statusBar().showMessage('执行重构......完成！', )  # 执行完成状态栏提示

    def tripD_display(self):
        try:
            valur_for_display
        except:
            self.showMessageBox()  # 警告！
        else:
            fig = plt.figure()
            ax = fig.add_subplot(111, projection='3d')

            size = valur_for_display.shape
            Y = np.arange(0, size[0], 1)
            X = np.arange(0, size[1], 1)

            X, Y = np.meshgrid(X, Y)

            surf = ax.plot_surface(X, Y, valur_for_display, cmap=cm.coolwarm)
            fig.colorbar(surf, shrink=0.5, aspect=5)

            plt.show()

    def tripD_display1(self):
        try:
            value_for_3Ddisplay1
        except:
            self.showMessageBox()  # 警告！
        else:
            fig = plt.figure()
            ax = fig.add_subplot(111, projection='3d')

            size = value_for_3Ddisplay1.shape
            Y = np.arange(0, size[0], 1)
            X = np.arange(0, size[1], 1)

            X, Y = np.meshgrid(X, Y)

            surf = ax.plot_surface(X, Y, value_for_3Ddisplay1, cmap=cm.coolwarm)
            fig.colorbar(surf, shrink=0.5, aspect=5)

            plt.show()


    # 保存重构结果
    def saveReconst(self):
        try:
            recontResults
        except:
            self.showMessageBox_1()  # 警告！
        else:
            screen = QApplication.primaryScreen()
            pix = screen.grabWindow(self.labReconst.winId())
            reImg, type = QFileDialog.getSaveFileName(self.centralwidget, "保存图片", "", "*.bmp;;All Files(*)")
            pix.save(reImg)


    def clearAll(self):
        try:
            inputImg_path
        except:
            self.showMessageBox_2()  # 警告！
        else:
            self.labImage.clear()
            self.labImage.setText("请重新选择待处理图像")
            self.labReconst.setText("重构结果")
            self.label_sValue.clear()

            gc.disable()  # 垃圾自动回收

    # 警告！
    def showMessageBox(self):
        res_0 = QMessageBox.warning(self, "警告", "错误操作！请先执行上一步骤！", QMessageBox.Close | QMessageBox.Close)

    # 警告！
    def showMessageBox_1(self):
        res_1 = QMessageBox.warning(self, "警告", "没有可以保存的图片！请按顺序执行！", QMessageBox.Close | QMessageBox.Close)

    # 警告！
    def showMessageBox_2(self):
        res_2 = QMessageBox.warning(self, "警告", "当前无需重置！程序准备完毕！", QMessageBox.Close | QMessageBox.Close)

    # 关于
    def showMessageAbout(self):
        about = QMessageBox.information(self, "关于", "合肥工业大学仪器科学与光电工程学院\n\n相位重构\n\n版本：v1.0",
                                        QMessageBox.Close |QMessageBox.Close)

    def center(self):
        # 得到主窗体的框架信息
        qr = self.frameGeometry()
        # 得到桌面的中心
        cp = QDesktopWidget().availableGeometry().center()
        # 框架的中心与桌面中心对齐
        qr.moveCenter(cp)
        # 自身窗体的左上角与框架的左上角对齐
        self.move(qr.topLeft())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    w = Window()
    w.show()
    sys.exit(app.exec_())
